# name: CodeQuality

# # on:
# #   pull_request:
# #     types: [synchronize, opened, reopened]

# on:
#   workflow_dispatch:

# jobs:
#   docker-lint:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       - name: Lint Dockerfile.keystone
#         run: docker run --rm -i hadolint/hadolint < Dockerfile.keystone

#       - name: Lint Dockerfile.nextjs
#         run: docker run --rm -i hadolint/hadolint < Dockerfile.nextjs

#   unit-test:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Create .env file
#         run: echo "DEVELOPMENT_DATABASE_URL=${{ secrets.DEVELOPMENT_DATABASE_URL }}" > veterans/.env

#       - name: Build app image
#         run: docker compose build

#       - name: Run tests
#         run: docker compose run --rm app-nextjs npm run test -- --coverage

#       - name: Save coverage report
#         uses: actions/upload-artifact@v4
#         with:
#           name: coverage-report
#           path: veterans/coverage/lcov.info

#   e2e-test:
#     runs-on: ubuntu-latest
#     if: ${{ github.actor != 'dependabot[bot]' }}
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4

#       - name: Create .env file
#         run: |
#           echo "DEVELOPMENT_DATABASE_URL=${{ secrets.DEVELOPMENT_DATABASE_URL }}" > veterans/.env
#           echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> veterans/.env

#       - name: Docker starts services
#         run: docker compose up -d --build

#       - name: Install Playwright Browsers
#         run: docker compose exec app-keystone npx playwright install --with-deps

#       - name: Run Playwright tests
#         run: docker compose exec app-keystone npm run test:e2e

#       - uses: actions/upload-artifact@v4
#         if: ${{ !cancelled() }}
#         with:
#           name: playwright-report
#           path: veterans/playwright-report/
#           retention-days: 30

#   lint:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v3

#       - name: Create .env file
#         run: echo "DEVELOPMENT_DATABASE_URL=${{ secrets.DEVELOPMENT_DATABASE_URL }}" > veterans/.env

#       - name: Build app image
#         run: docker compose build

#       - name: Run linters
#         run: docker compose run --rm app-nextjs npm run lint

#   sonarqube:
#     runs-on: ubuntu-latest
#     if: ${{ github.actor != 'dependabot[bot]' }}
#     needs: unit-test
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4
#         with:
#           fetch-depth: 0

#       - name: Download coverage report
#         uses: actions/download-artifact@v4
#         with:
#           name: coverage-report

#       - name: SonarQube Scan
#         uses: sonarsource/sonarqube-scan-action@v4.1.0
#         env:
#           SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
name: Vercel Preview Deployment

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  MONGODB_URI: ${{ secrets.MONGODB_URI }}

jobs:
  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Run Eslint
        run: npm run lint

  unit-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Run Jest
        run: npm run jest

  e2e-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Run Cypress
        run: npm run cy:test

  preview-deployment:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment:
      name: preview
      url: ${{ steps.deploy.outputs.url }}
    needs:
      - lint
      - unit-tests
      - e2e-tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          DEPLOY_URL=$(vercel deploy --prebuilt --token='${{ secrets.VERCEL_TOKEN }}')
          echo "url=$DEPLOY_URL" >> $GITHUB_OUTPUT
          echo "Preview URL: $DEPLOY_URL"
