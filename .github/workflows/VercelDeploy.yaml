name: Vercel Preview Deployment

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  DATABASE_URL: ${{ secrets.ENV_FILE }}

on:
  workflow_dispatch:

jobs:
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./veterans

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Validate required secrets
        run: |
          if [ -z "$VERCEL_ORG_ID" ] || [ -z "$VERCEL_PROJECT_ID" ] || [ -z "${{ secrets.VERCEL_CLI_TOKEN }}" ]; then
            echo "::error::Required secrets VERCEL_ORG_ID, VERCEL_PROJECT_ID, and VERCEL_CLI_TOKEN must be set"
            exit 1
          fi

      # - name: Create .env file
      #   run: echo "${{ secrets.ENV_FILE }}" > .env

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.18.2'
          cache: 'npm'
          cache-dependency-path: './veterans/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Run Keystone dev with timeout
        run: |
          npx keystone dev &
          for i in {1..30}; do
            if nc -z localhost 3000; then
              echo "Keystone is running."
              pkill -f "keystone dev"
              break
            fi
            sleep 1
          done

      - name: Check content of folder
        run: ls -al

      # - name: Pull Vercel Environment
      #   run: |
      #     npx vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_CLI_TOKEN }}
      #     echo "Vercel Environment pulled successfully."

      # - name: Build project
      #   run: vercel build --yes --token=${{ secrets.VERCEL_CLI_TOKEN }}
      #   timeout-minutes: 10

      # - name: Deploy to Vercel
      #   id: deploy
      #   run: |
      #     if ! DEPLOYMENT_URL=$(vercel deploy --prebuilt --token="${{ secrets.VERCEL_CLI_TOKEN }}"); then
      #       echo "::error::Deployment failed"
      #       exit 1
      #     fi
      #     echo "DEPLOYMENT_URL=${DEPLOYMENT_URL}" >> "$GITHUB_ENV"
      #   timeout-minutes: 10

      # - name: Check if DEPLOYMENT_URL is set
      #   run: |
      #     if [ -z "${{ env.DEPLOYMENT_URL }}" ]; then
      #       echo "::error::DEPLOYMENT_URL is not set. This might be due to:"
      #       echo "1. Failed Vercel deployment"
      #       echo "2. Missing or invalid VERCEL_CLI_TOKEN"
      #       echo "3. Network connectivity issues"
      #       echo "Please check the deployment logs above for more details."
      #       exit 1
      #     else
      #       echo "DEPLOYMENT_URL is set to: ${{ env.DEPLOYMENT_URL }}"
      #     fi
