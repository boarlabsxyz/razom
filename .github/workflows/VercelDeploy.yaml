name: Deploy to Vercel

on:
  workflow_dispatch:

jobs:
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./veterans

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.18.2'
          cache: 'npm'
          cache-dependency-path: './veterans/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Pull Vercel Environment
        run: npx vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_CLI_TOKEN }}

      # - name: Parse VERCEL_ENV_FILE and export variables
      #   run: |
      #     echo '${{ secrets.VERCEL_ENV_FILE }}' > vercel_env.json
      #     export PROJECT_ID=$(jq -r '.projectId' vercel_env.json)
      #     export ORG_ID=$(jq -r '.orgId' vercel_env.json)
      #     echo "projectId=$PROJECT_ID" >> $GITHUB_ENV
      #     echo "orgId=$ORG_ID" >> $GITHUB_ENV
      #   shell: bash

      - name: Parse VERCEL_ENV_FILE and write to veterans/.vercel/projects.json
        run: |
          echo '${{ secrets.VERCEL_ENV_FILE }}' > vercel_env.json
          PROJECT_ID=$(jq -r '.projectId' vercel_env.json)
          ORG_ID=$(jq -r '.orgId' vercel_env.json)
          mkdir -p .veterans/.vercel
          echo "{ \"projectId\": \"$PROJECT_ID\", \"orgId\": \"$ORG_ID\" }" > veretans/.vercel/projects.json
        shell: bash

      # - name: Echo variables from $GITHUB_ENV
      #   run: |
      #     echo "projectId=${projectId}"
      #     echo "orgId=${orgId}"

      - name: Build project
        run: vercel build --yes --token=${{ secrets.VERCEL_CLI_TOKEN }}
        timeout-minutes: 10

      - name: Deploy to Vercel
        id: deploy
        run: |
          if ! DEPLOYMENT_URL=$(vercel deploy --prebuilt --token="${{ secrets.VERCEL_CLI_TOKEN }}"); then
            echo "::error::Deployment failed"
            exit 1
          fi
          echo "DEPLOYMENT_URL=${DEPLOYMENT_URL}" >> $GITHUB_ENV
        timeout-minutes: 10

      - name: Check if DEPLOYMENT_URL is set
        run: |
          if [ -z "${{ env.DEPLOYMENT_URL }}" ]; then
            echo "::error::DEPLOYMENT_URL is not set"
            exit 1
          else
            echo "DEPLOYMENT_URL is set to: ${{ env.DEPLOYMENT_URL }}"
          fi

      - name: Create deployment environment file
        run: echo "PREVIEW_URL=${{ env.DEPLOYMENT_URL }}" > preview-deployment.env

      - name: Verify deployment environment file creation
        run: |
          if [ -f "preview-deployment.env" ]; then
            echo "preview-deployment.env file created successfully."
            cat preview-deployment.env
          else
            echo "::error::preview-deployment.env file not found"
            exit 1
          fi

      - name: Upload Deployment Environment
        uses: actions/upload-artifact@v4
        with:
          name: preview-deployment
          path: preview-deployment.env

    env:
      CI_COMMIT_REF_SLUG: ${{ github.head_ref || github.ref_name }}
      CI_PROJECT_NAMESPACE: ${{ github.repository_owner }}
      CI_PIPELINE_SOURCE: workflow_dispatch
