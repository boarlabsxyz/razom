name: Vercel Preview Deployment

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  VERCEL_CLI_TOKEN: ${{ secrets.VERCEL_CLI_TOKEN }}
  PRODUCTION_DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
  NODE_ENV: 'production'

on:
  workflow_dispatch:

jobs:
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Validate required secrets
        run: |
          if [ -z "$VERCEL_ORG_ID" ] || [ -z "$VERCEL_PROJECT_ID" ] || [ -z "$VERCEL_CLI_TOKEN" ] || [ -z "$PRODUCTION_DATABASE_URL" ]; then
            echo "::error::Required secrets VERCEL_ORG_ID, VERCEL_PROJECT_ID, VERCEL_CLI_TOKEN and PRODUCTION_DATABASE_URL must be set"
            exit 1
          fi

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.18.2'
          cache: 'npm'
          cache-dependency-path: './veterans/package-lock.json'

      - name: Install dependencies
        run: npm ci
        working-directory: ./veterans

      - name: Run Keystone dev with timeout
        run: |
          timeout 30s sh -c '
            npx keystone dev & PID=$!
            while ! nc -z localhost 3000; do
              if ! kill -0 $PID 2>/dev/null; then
                echo "Keystone process died"
                exit 1
              fi
              sleep 1
            done
            echo "Keystone is running."
            kill $PID
          ' || (echo "Keystone failed to start"; exit 1)
        working-directory: ./veterans

      - name: List current directory contents
        run: |
          cd veterans
          ls -la

      - name: Add binaryTargets to schema.prisma
        run: node scripts/add-binary-targets.js

      - name: Show schema.prisma content
        run: cat ./veterans/schema.prisma

      - name: Clean node_modules/.prisma
        run: rm -rf node_modules/.prisma

      - name: Generate Prisma Client
        run: npx prisma generate
        working-directory: ./veterans

      - name: Apply Prisma Migrations
        run: npx prisma migrate deploy
        working-directory: ./veterans

      - name: Pull Vercel Environment
        run: |
          npx vercel pull --yes --environment=preview --token="$VERCEL_CLI_TOKEN"
          echo "Vercel Environment pulled successfully."

      - name: Build project
        run: npx vercel build --yes --token="$VERCEL_CLI_TOKEN"
        timeout-minutes: 10
        working-directory: ./veterans

      - name: Deploy to Vercel
        id: deploy
        run: |
          if ! DEPLOYMENT_URL=$(npx vercel deploy --prebuilt --token="$VERCEL_CLI_TOKEN"); then
            echo "::error::Deployment failed"
            exit 1
          fi
          echo "DEPLOYMENT_URL=${DEPLOYMENT_URL}" >> "$GITHUB_ENV"
        timeout-minutes: 10
        working-directory: ./veterans

      - name: Check if DEPLOYMENT_URL is set
        run: |
          if [ -z "${{ env.DEPLOYMENT_URL }}" ]; then
            echo "::error::DEPLOYMENT_URL is not set. This might be due to:"
            echo "1. Failed Vercel deployment"
            echo "2. Missing or invalid VERCEL_CLI_TOKEN"
            echo "3. Network connectivity issues"
            echo "Please check the deployment logs above for more details."
            exit 1
          else
            echo "DEPLOYMENT_URL is set to: ${{ env.DEPLOYMENT_URL }}"
          fi
