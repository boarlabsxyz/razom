name: Deploy to Vercel

on:
  workflow_dispatch:

jobs:
  deploy-preview:
    name: Deploy Preview
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./veterans

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.18.2'
          cache: 'npm'
          cache-dependency-path: './veterans/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Parse VERCEL_ENV_FILE and write to .vercel/projects.json
        run: |
          mkdir -p .vercel
          echo '${{ secrets.VERCEL_ENV_FILE }}' > .vercel/project.json
        shell: bash

      - name: Pull Vercel Environment
        run: |
          npx vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_CLI_TOKEN }}
          echo "Vercel Environment pulled successfully."
          cat .vercel/project.json

      - name: Build project
        run: vercel build --yes --token=${{ secrets.VERCEL_CLI_TOKEN }}
        timeout-minutes: 10

      - name: Deploy to Vercel
        id: deploy
        run: |
          if ! DEPLOYMENT_URL=$(vercel deploy --prebuilt --token="${{ secrets.VERCEL_CLI_TOKEN }}"); then
            echo "::error::Deployment failed"
            exit 1
          fi
          echo "DEPLOYMENT_URL=${DEPLOYMENT_URL}" >> $GITHUB_ENV
        timeout-minutes: 10

      - name: Check if DEPLOYMENT_URL is set
        run: |
          if [ -z "${{ env.DEPLOYMENT_URL }}" ]; then
            echo "::error::DEPLOYMENT_URL is not set"
            exit 1
          else
            echo "DEPLOYMENT_URL is set to: ${{ env.DEPLOYMENT_URL }}"
          fi

      - name: Create deployment environment file
        run: echo "PREVIEW_URL=${{ env.DEPLOYMENT_URL }}" > preview-deployment.env

      - name: Verify deployment environment file creation
        run: |
          if [ -f "preview-deployment.env" ]; then
            echo "preview-deployment.env file created successfully."
            cat preview-deployment.env
          else
            echo "::error::preview-deployment.env file not found"
            exit 1
          fi
