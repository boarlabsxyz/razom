name: Vercel Deployment

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Are you sure you want to deploy?'
        required: true
        type: boolean
        default: false
      deploy-env:
        description: 'Environment to deploy'
        required: true
        type: choice
        options:
          - preview
          - staging
          - production
        default: preview

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  VERCEL_CLI_TOKEN: ${{ secrets.VERCEL_CLI_TOKEN }}
  SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
  NODE_ENV: ${{ secrets.NODE_ENV }}
  # NODE_ENV: ${{ inputs.deploy-env }}
  # VERCEL_ENV: ${{ inputs.deploy-env }}
  STATIC_DEPLOY_URL_PROD: ${{ secrets.STATIC_DEPLOY_URL_PROD }}
  STATIC_DEPLOY_URL_STAGING: ${{ secrets.STATIC_DEPLOY_URL_STAGING }}
  RESEND_API_KEY: ${{ secrets.RESEND_API_KEY}}

jobs:
  deployment:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment:
      name: ${{ inputs.deploy-env }}
      url: ${{ inputs.deploy-env == 'preview' && steps.deploy.outputs.url || (inputs.deploy-env == 'staging' && env.STATIC_DEPLOY_URL_STAGING || env.STATIC_DEPLOY_URL_PROD) }}

    steps:
      - name: Check if user confirmed the deployment
        if: ${{ !inputs.confirm }}
        run: |
          echo "❌ Deployment was not confirmed. Exiting..."
          exit 1
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate required secrets
        run: |
          if [ -z "$VERCEL_ORG_ID" ] || [ -z "$VERCEL_PROJECT_ID" ] || [ -z "$VERCEL_CLI_TOKEN" ]; then
            echo "::error::Missing required Vercel secrets"
            exit 1
          fi

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.18.2'
          cache: 'npm'
          cache-dependency-path: './veterans/package-lock.json'

      - name: Install dependencies
        run: npm ci
        working-directory: ./veterans

      - name: Build project
        run: |
          if [[ "${{ inputs.deploy-env }}" == "preview" ]]; then
            npx vercel build --yes --token="$VERCEL_CLI_TOKEN"
          else
            npx vercel build --yes --prod --token="$VERCEL_CLI_TOKEN"
          fi
        working-directory: ./veterans

      - name: Deploy to Vercel
        id: deploy
        run: |
          if [[ "${{ inputs.deploy-env }}" == "production" ]]; then
            DEPLOYMENT_URL=$(npx vercel deploy --prebuilt --prod --token="$VERCEL_CLI_TOKEN")
            echo "DEPLOY_URL=$STATIC_DEPLOY_URL_PROD" >> "$GITHUB_ENV"
          elif [[ "${{ inputs.deploy-env }}" == "staging" ]]; then
            DEPLOYMENT_URL=$(npx vercel deploy --prebuilt --prod --token="$VERCEL_CLI_TOKEN")
            echo "DEPLOY_URL=$STATIC_DEPLOY_URL_STAGING" >> "$GITHUB_ENV"
          else
            DEPLOYMENT_URL=$(npx vercel deploy --prebuilt --token="$VERCEL_CLI_TOKEN")
            echo "DEPLOY_URL=$DEPLOYMENT_URL" >> "$GITHUB_ENV"
          fi

          echo "url=$DEPLOYMENT_URL" >> "$GITHUB_OUTPUT"
          echo "DEPLOYMENT_URL=$DEPLOYMENT_URL" >> "$GITHUB_ENV"
          echo "Preview URL: $DEPLOYMENT_URL"
        working-directory: ./veterans

      - name: Check if DEPLOYMENT_URL is set
        run: |
          if [ -z "${{ env.DEPLOYMENT_URL }}" ]; then
            echo "::error::DEPLOYMENT_URL is not set. This might be due to:"
            echo "1. Failed Vercel deployment"
            echo "2. Missing or invalid VERCEL_CLI_TOKEN"
            echo "3. Network connectivity issues"
            echo "Please check the deployment logs above for more details."
            exit 1
          else
            echo "DEPLOYMENT_URL is set to: ${{ env.DEPLOYMENT_URL }}"
          fi
