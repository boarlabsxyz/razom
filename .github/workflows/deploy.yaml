name: Vercel Deployment

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
  workflow_dispatch:

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  VERCEL_CLI_TOKEN: ${{ secrets.VERCEL_CLI_TOKEN }}
  SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
  NODE_ENV: ${{ github.event_name == 'pull_request' && 'preview' || 'production' }}

jobs:
  docker-lint:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Lint Dockerfiles
        run: |
          docker run --rm -i hadolint/hadolint < Dockerfile.keystone
          docker run --rm -i hadolint/hadolint < Dockerfile.nextjs

  unit-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          echo "DATABASE_URL=${{ secrets.DEVELOPMENT_DATABASE_URL }}" > veterans/.env
          echo "TEST_DATABASE_URL=${{ secrets.TEST_DATABASE_URL }}" >> veterans/.env
          echo "SESSION_SECRET=${{ secrets.SESSION_SECRET }}" >> veterans/.env

      - name: Build app image
        run: docker compose build

      - name: Run tests
        run: docker compose run --rm app-nextjs npm run test -- --coverage

      - name: Save coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: veterans/coverage/lcov.info

  lint:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create .env file
        run: echo "DATABASE_URL=${{ secrets.DEVELOPMENT_DATABASE_URL }}" > veterans/.env

      - name: Build app image
        run: docker compose build

      - name: Run linters
        run: docker compose run --rm app-nextjs npm run lint

  e2e-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          echo "DEVELOPMENT_DATABASE_URL=${{ secrets.DEVELOPMENT_DATABASE_URL }}" > veterans/.env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> veterans/.env
          echo "SESSION_SECRET=${{ secrets.SESSION_SECRET }}" >> veterans/.env

      - name: Get latest run ID for playwright-snapshots
        id: get-latest-run
        run: |
          for i in {1..3}; do
            response=$(curl -sL --max-time 10 \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github+json" \
              "https://api.github.com/repos/${{ github.repository }}/actions/artifacts")

            if [ $? -eq 0 ]; then
              latest=$(echo "$response" | \
                jq -r '[.artifacts[] | select(.name == "playwright-snapshots")] | sort_by(.created_at) | last')

              if [ "$latest" != "null" ]; then
                run_id=$(echo "$latest" | jq -r '.workflow_run.id')
                echo "latest_run_id=$run_id" >> $GITHUB_ENV
                echo "Found latest run ID: $run_id"
                break
              fi
            fi
            echo "Attempt $i failed, retrying..."
            sleep 5
          done

      - name: Download Playwright snapshots artifact
        uses: actions/download-artifact@v4
        with:
          name: playwright-snapshots
          path: e2e/nextjs-test/screenshot-test.spec.ts-snapshots
          merge-multiple: true
          github-token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          run-id: ${{ env.latest_run_id }}

      - name: Verify downloaded snapshots
        run: ls -la e2e/nextjs-test/screenshot-test.spec.ts-snapshots

      - name: Docker starts services
        run: docker compose up -d --build

      - name: Install Playwright Browsers (app-keystone)
        run: docker compose exec app-keystone npx playwright install --with-deps

      - name: Show Keystone logs
        run: docker compose logs app-keystone

      - name: Run Playwright tests (app-keystone)
        run: |
          timeout 600s docker compose exec app-keystone sh -c "npm run test:e2e -- e2e/keystone-test" || echo "TESTS_FAILED=true" >> $GITHUB_ENV
        continue-on-error: true

      - name: Install Playwright Browsers (app-nextjs)
        run: docker compose exec app-nextjs npx playwright install --with-deps

      - name: Copy snapshots to Docker container
        run: |
          docker cp e2e/nextjs-test/screenshot-test.spec.ts-snapshots razom-app-nextjs-1:/usr/src/app/e2e/nextjs-test/

      - name: Run Playwright tests (app-nextjs)
        run: |
          timeout 600s docker compose exec app-nextjs sh -c "npm run test:e2e -- e2e/nextjs-test" || echo "TESTS_FAILED=true" >> $GITHUB_ENV
        continue-on-error: true

      - name: Upload snapshots as new artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: veterans/playwright-report/
          retention-days: 30

      - name: Fail workflow if tests failed
        if: ${{ env.TESTS_FAILED == 'true' }}
        run: exit 1

  sonarqube:
    runs-on: ubuntu-latest
    if: ${{ github.actor != 'dependabot[bot]' }}
    needs: unit-tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v5.0.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: SonarQube Quality Gate check
        uses: sonarsource/sonarqube-quality-gate-action@v1.1.0
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  deployment:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment:
      name: ${{ github.event_name == 'pull_request' && 'preview' || 'production' }}
      url: ${{ github.event_name == 'pull_request' && 'https://' || 'https://razom.vercel.app/' }}
    needs:
      - lint
      - unit-tests
      - e2e-tests
      - sonarqube
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate required secrets
        run: |
          if [ -z "$VERCEL_ORG_ID" ] || [ -z "$VERCEL_PROJECT_ID" ] || [ -z "$VERCEL_CLI_TOKEN" ]; then
            echo "::error::Missing required Vercel secrets"
            exit 1
          fi

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.18.2'
          cache: 'npm'
          cache-dependency-path: './veterans/package-lock.json'

      - name: Install dependencies
        run: npm ci
        working-directory: ./veterans

      - name: Build project
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            npx vercel build --yes --token="$VERCEL_CLI_TOKEN"
          else
            npx vercel build --yes --prod --token="$VERCEL_CLI_TOKEN"
          fi
        working-directory: ./veterans

      - name: Deploy to Vercel
        id: deploy
        run: |
          # For Preview Deployment
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            DEPLOYMENT_URL=$(npx vercel deploy --prebuilt --token="$VERCEL_CLI_TOKEN")
          else
          # For Production Deployment
            DEPLOYMENT_URL=$(npx vercel deploy --prebuilt --prod --token="$VERCEL_CLI_TOKEN")
          fi
            echo "url=$DEPLOYMENT_URL" >> "$GITHUB_OUTPUT"
            echo "DEPLOYMENT_URL=${DEPLOYMENT_URL}" >> "$GITHUB_ENV"
            echo "Preview URL: $DEPLOYMENT_URL"
        working-directory: ./veterans

      - name: Check if DEPLOYMENT_URL is set
        run: |
          if [ -z "${{ env.DEPLOYMENT_URL }}" ]; then
            echo "::error::DEPLOYMENT_URL is not set. This might be due to:"
            echo "1. Failed Vercel deployment"
            echo "2. Missing or invalid VERCEL_CLI_TOKEN"
            echo "3. Network connectivity issues"
            echo "Please check the deployment logs above for more details."
            exit 1
          else
            echo "DEPLOYMENT_URL is set to: ${{ env.DEPLOYMENT_URL }}"
          fi
