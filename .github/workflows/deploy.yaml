name: Vercel Deployment

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Are you sure you want to deploy?'
        required: true
        type: boolean
        default: false
      deploy-env:
        description: 'Environment to deploy'
        required: true
        type: choice
        options:
          - preview
          - staging
          - production
        default: preview

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  VERCEL_CLI_TOKEN: ${{ secrets.VERCEL_CLI_TOKEN }}
  SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
  STATIC_DEPLOY_URL_PROD: ${{ secrets.STATIC_DEPLOY_URL_PROD }}
  STATIC_DEPLOY_URL_STAGING: ${{ secrets.STATIC_DEPLOY_URL_STAGING }}
  RESEND_API_KEY: ${{ secrets.RESEND_API_KEY}}

jobs:
  deployment:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment:
      name: ${{ inputs.deploy-env }}
      url: ${{ inputs.deploy-env == 'preview' && steps.deploy.outputs.url || (inputs.deploy-env == 'staging' && env.STATIC_DEPLOY_URL_STAGING || env.STATIC_DEPLOY_URL_PROD) }}

    steps:
      - name: Check if user confirmed the deployment
        if: ${{ !inputs.confirm }}
        run: |
          echo "❌ Deployment was not confirmed. Exiting..."
          exit 1
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate required secrets
        run: |
          if [ -z "$VERCEL_ORG_ID" ] || [ -z "$VERCEL_PROJECT_ID" ] || [ -z "$VERCEL_CLI_TOKEN" ]; then
            echo "::error::Missing required Vercel secrets"
            exit 1
          fi

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.18.2'
          cache: 'npm'
          cache-dependency-path: './veterans/package-lock.json'

      - name: Install dependencies
        run: npm ci
        working-directory: ./veterans

      - name: Install Vercel CLI
        run: npm install -g vercel
        working-directory: ./veterans

      - name: Build project
        run: |
          if [[ "${{ inputs.deploy-env }}" == "preview" ]]; then
            npx vercel build --yes --token="$VERCEL_CLI_TOKEN"
          else
            npx vercel build --yes --prod --token="$VERCEL_CLI_TOKEN"
          fi
        working-directory: ./veterans

      - name: Deploy to Vercel
        id: deploy
        run: |
          if [[ "${{ inputs.deploy-env }}" == "production" ]]; then
            # Deploy to production
            DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token="$VERCEL_CLI_TOKEN" --scope="$VERCEL_ORG_ID")
            echo "DEPLOY_URL=$STATIC_DEPLOY_URL_PROD" >> "$GITHUB_ENV"
            # Assign production domain
            vercel alias set "$DEPLOYMENT_URL" mozhlyvosti.org.ua --token="$VERCEL_CLI_TOKEN" --scope="$VERCEL_ORG_ID"
          elif [[ "${{ inputs.deploy-env }}" == "staging" ]]; then
            # Deploy to staging
            DEPLOYMENT_URL=$(vercel deploy --prebuilt --prod --token="$VERCEL_CLI_TOKEN" --scope="$VERCEL_ORG_ID")
            echo "DEPLOY_URL=$DEPLOYMENT_URL" >> "$GITHUB_ENV"
            
            # Get the full deployment ID from the inspect URL
            INSPECT_URL=$(echo "$DEPLOYMENT_URL" | grep -o 'Inspect: https://vercel.com/[^ ]*' | cut -d' ' -f2)
            DEPLOYMENT_ID=$(echo "$INSPECT_URL" | sed 's|https://vercel.com/kavoon/razom/||')
            
            echo "Deployment ID: $DEPLOYMENT_ID"
            
            # First, try to remove any existing alias
            curl -X DELETE \
              -H "Authorization: Bearer $VERCEL_CLI_TOKEN" \
              "https://api.vercel.com/v2/domains/staging-razom.vercel.app/records" || true
            
            # Then, create the new alias using the full deployment ID
            curl -X POST \
              -H "Authorization: Bearer $VERCEL_CLI_TOKEN" \
              -H "Content-Type: application/json" \
              -d "{\"deploymentId\": \"$DEPLOYMENT_ID\", \"alias\": \"staging-razom.vercel.app\"}" \
              "https://api.vercel.com/v13/deployments/$DEPLOYMENT_ID/aliases"
          else
            # Deploy preview
            DEPLOYMENT_URL=$(vercel deploy --prebuilt --token="$VERCEL_CLI_TOKEN" --scope="$VERCEL_ORG_ID")
            echo "DEPLOY_URL=$DEPLOYMENT_URL" >> "$GITHUB_ENV"
          fi

          echo "url=$DEPLOYMENT_URL" >> "$GITHUB_OUTPUT"
          echo "DEPLOYMENT_URL=$DEPLOYMENT_URL" >> "$GITHUB_ENV"
          echo "Preview URL: $DEPLOYMENT_URL"
        working-directory: ./veterans

      - name: Install jq
        run: sudo apt-get install jq

      - name: Extract deployment ID
        id: extract-id
        run: |
          echo "Fetching deployment metadata from Vercel API"
          DEPLOYMENT_URL_CLEAN="${DEPLOYMENT_URL##https://}"
          API_RESPONSE=$(curl -s -H "Authorization: Bearer $VERCEL_CLI_TOKEN" "https://api.vercel.com/v13/deployments/get?url=$DEPLOYMENT_URL_CLEAN")
          echo "$API_RESPONSE" | jq .
          DEPLOYMENT_ID=$(echo "$API_RESPONSE" | jq -r '.id')
          if [ -z "$DEPLOYMENT_ID" ] || [ "$DEPLOYMENT_ID" == "null" ]; then
            echo "::error::Failed to extract deployment ID"
            exit 1
          fi
          echo "DEPLOYMENT_ID=$DEPLOYMENT_ID" >> "$GITHUB_ENV"
        working-directory: ./veterans

      - name: Check if DEPLOYMENT_URL is set
        run: |
          if [ -z "${{ env.DEPLOYMENT_URL }}" ]; then
            echo "::error::DEPLOYMENT_URL is not set. This might be due to:"
            echo "1. Failed Vercel deployment"
            echo "2. Missing or invalid VERCEL_CLI_TOKEN"
            echo "3. Network connectivity issues"
            echo "Please check the deployment logs above for more details."
            exit 1
          else
            echo "DEPLOYMENT_URL is set to: ${{ env.DEPLOYMENT_URL }}"
          fi
